# Discord-Radio-Bot-UK
Discord Streaming Bot with installation instructions

## Online Hosting - please see www.glitch.com and use this guide: https://anidiots.guide/other-guides/hosting-on-glitch (saving you from leaving your PC on forever!)

## How to use:

Create a Discord Bot: https://discordpy.readthedocs.io/en/rewrite/discord.html

Copy away the Bot "Token" and the Bot "ClientID" for safe keeping.

Create a new folder on the desktop and call it "DiscordBot" (or whatever you want it to be called "RadioBot"?). This is where we will    run the Radio from, so make sure all the Git files/folders are copied to this location.

Open CMD Prompt: navigate to the folder you just created (cd Users\$username$\Desktop\DiscordBot /or RadioBot)

Install all npm prerequisites to that folder path following this guide below:

If you don't already have Python 2.7 and Visual Studio, run npm install --global windows-build-tools
npm install --save discord.js in your bot's project folder
Good to go!

## Installing node.js:

To install discord.js on Windows, you need to begin by installing node.js. If you already have node, please make sure your version is anything greater than or equal to 6.0.0 - you can check using node --version. If it isn't, install it here:

latest version - https://nodejs.org/en/

After installing node.js, make a folder for your bot, for example on the Desktop. Open this folder then SHIFT + RIGHT CLICK anywhere in the empty space, then click Open command window here.

A command prompt should appear. Verify node is installed by typing node --version and hitting enter. If you see the following error message, then please make sure you have installed node.js properly.

:: If you see this message, make sure that you installed node properly:
'node' is not recognized as an internal or external command, operable program or batch file
Installing a C++ compiler
Discord.js has some dependencies that require compiling with C++. If you have Visual Studio 2015 and above, and Python 2.7, you can skip this step.

Open a separate administrator command prompt, you can do this by pressing WindowsKey + X and selecting Command Prompt (Admin). Then enter npm install --global windows-build-tools, which will install Python 2.7 and a C++ compiler for you. This may take a while.

## Installing discord.js

Now we can finally install discord.js! It's time to open up your first command prompt again.

We recommend that you also initialise your bot project as an npm module, which you can do by running npm init, which starts a wizard that guides you through the process. It makes distributing and managing your bot much easier in the future.

Install discord.js with npm install --save discord.js.

If you want your bot to be able to play and receive audio in voice channels, also type npm install --global ffmpeg-binaries node-opus.

You may see UNMET PEER DEP errors, ignore them. You can ensure discord.js is installed by running npm list discord.js

** IMPORTANT ** Open the config.JSON file and put in your Bot "Token" you saved away.  Doing this, links the scripts (.js) in your desktop folder (or wherever you stored the files) to the Discord Bot you created earlier.

## To run the RadioBot from your home PC/Server/NAS:

Open CMD Prompt and navigate to the desktop folder again (cd Users\$username$\Desktop\DiscordBot /or RadioBot) and type: node bot.js

If all is well and the above was followed correctly, you should find you have a running Discord Radio bot.

In Discord type "+radio" to pull the bot into your voice channel and if nothing is playing type "+radio" again to start the first stream (which is coded as Capital FM). Use "+radio 1 / 2 / 3 or 4 to change the station.  The streams can be edited inside the bot.js file to whatever stations you prefer. When in Discord type "+list" to list the radio stations available. (All the switchs can be found inside the bot.js file about halfway down the script).

A voila! You now have a fully fucntioning Discord Radio Bot. Hit +botinfo to see extra info.{
  "TOKEN": "BOT TOKEN HERE",
  "PREFIX": "prefix before the command such as ! or m!",
  "VERSION": "1.4.0",
  "EXPERIMENTAL": "0"
}﻿// Load up the discord.js library. Else throw an error.
try {
  var Discord = require('discord.js')
  if (process.version.slice(1).split('.')[0] < 8) {
    throw new Error('Node 8.0.0 or higher is required. Please upgrade / update Node.js on your computer / server.')
  }
} catch (e) {
  console.error(e.stack)
  console.error('Current Node.js version: ' + process.version)
  console.error("In case you´ve not installed any required module: \nPlease run 'npm install' and ensure it passes with no errors!")
  process.exit()
}
const client = new Discord.Client({disableEveryone: true})

const radio = require('./modules/radio')

// Create a config file like the example-config.json
// Put EXPERIMENTAL to 1 if you are developing!
var {TOKEN, PREFIX, VERSION, EXPERIMENTAL} = require('./config.json')

let clientStatus

if (EXPERIMENTAL === '1') {
  clientStatus = 'idle'
} else {
  clientStatus = 'online'
}

client.on('warn', console.warn)

client.on('error', console.error)

client.on('ready', async () => {
  console.log('Starting Bot...\nNode version: ' + process.version + '\nDiscord.js version: ' + Discord.version + '\n')
  console.log('This Bot is online! Running on version ' + VERSION)
  client.user.setPresence({
    status: clientStatus,
    game: {
      name: `on ${client.guilds.size} servers! ${PREFIX}help`
    }
  }).catch(e => {
    console.error(e)
  })
  console.log(`Ready to serve on ${client.guilds.size} servers for a total of ${client.users.size} users.`)

  // This is only for development purposes, you can write everything you want here
  if (EXPERIMENTAL === '1') {
    // console.log("\nOnline on these servers:")
    // client.guilds.map(g => {
    //   console.log(g.name);
    // })
  }
})

client.on('disconnect', () => console.log('I disconnected currently but I will try to reconnect!'))

client.on('reconnecting', () => console.log('Reconnecting...'))

// This event triggers only when the bot joins a guild.
client.on('guildCreate', guild => {
  console.log(`Joined a new guild -> ${guild.name}. (id: ${guild.id}) This guild has ${guild.memberCount} members!`)
  client.user.setPresence({
    game: {
      name: `on ${client.guilds.size} servers! ${PREFIX}help`
    }
  }).catch(e => {
    console.error(e)
  })
})

// This event triggers only when the bot is removed from a guild.
client.on('guildDelete', guild => {
  console.log(`I have been removed from -> ${guild.name}. (id: ${guild.id})`)
  client.user.setPresence({
    game: {
      name: `on ${client.guilds.size} servers! ${PREFIX}help`
    }
  }).catch(e => {
    console.error(e)
  })
})

client.on('message', async msg => {
  if (msg.isMentioned(client.user)) {
    msg.delete().catch(e => {
      // console.error(e)
      msg.channel.send('❌ Message to the owner of the server: **Please give the right permissions to me so I can delete this message.**')
    })
    msg.author.send({
      embed: {
        color: 3447003,
        title: 'DFC RadioBot -> Commands',
        fields: [
          {
            name: PREFIX + 'radio',
            value: 'If you are in a channel, I will join to your channel and start playing the web radio'
          },
          {
            name: PREFIX + 'stop or ' + PREFIX + 'leave',
            value: 'Stops playing the music (if you are in a voice channel) and I will leave the channel'
          },
          {
            name: PREFIX + 'invite',
            value: 'The bot will send an invite link to you so you can invite the bot to your server'
          },
          {
            name: PREFIX + 'botinfo',
            value: 'Sends information about the bot'
          },
          {
            name: PREFIX + 'list or ' + PREFIX + 'radiolist',
            value: 'Sends a list with all radios available'
          }
        ],
        timestamp: new Date()
      }
    })
  }

  if (msg.author.bot) return
  if (!msg.content.startsWith(PREFIX)) return undefined

  const args = msg.content.split(' ')

  let command = msg.content.toLowerCase().split(' ')[0]
  command = command.slice(PREFIX.length)

  if (command === 'radio') {
    console.log(args)

    // If no other argument was given, then the bot will play the main radio
    if (args[1] === undefined) {
      radio.playRadio(msg.member.voiceChannel, msg, 'Capital FM', 'http://vis.media-ice.musicradio.com/CapitalUKMP3')
    }

    // Kiss 100 - Web radio
    if (args[1] === '1') {
      radio.playRadio(msg.member.voiceChannel, msg, 'Kiss 100', 'http://tx.planetradio.co.uk/http_live_bauer.php?i=kissnational.aac&awparams=loggedin:false&amsparams=playerid:BMUK_tunein')
    }

    // Heart FM - Web radio
    if (args[1] === '2') {
      radio.playRadio(msg.member.voiceChannel, msg, 'Heart FM', 'http://vis.media-ice.musicradio.com/HeartUKMP3')
    }

    // Drum N Bass FM - Web radio
    if (args[1] === '3') {
      radio.playRadio(msg.member.voiceChannel, msg, 'Drum N Bass FM', 'http://photek.dnbradio.com:8000/dnbradio_main.mp3')
    }

    // SynthWave FM - Web radio
    if (args[1] === '4') {
      radio.playRadio(msg.member.voiceChannel, msg, 'SynthWave FM', 'http://13.229.223.14:8000/stream')
    }
  }

  if (command === 'help') {
    msg.delete().catch(e => {
      // console.error(e)
      msg.channel.send('❌ Message to the owner of the server: **Please give the right permissions to me so I can delete this message.**')
    })
    msg.author.send({
      embed: {
        color: 3447003,
        title: 'DFC RadioBot -> Commands',
        fields: [
          {
            name: PREFIX + 'radio',
            value: 'If you are in a channel, I will join to your channel and start playing the web radio'
          },
          {
            name: PREFIX + 'stop or ' + PREFIX + 'leave',
            value: 'Stops playing the music (if you are in a voice channel) and I will leave the channel'
          },
          {
            name: PREFIX + 'invite',
            value: 'The bot will send an invite link to you so you can invite the bot to your server'
          },
          {
            name: PREFIX + 'botinfo',
            value: 'Sends information about the bot'
          },
          {
            name: PREFIX + 'list or ' + PREFIX + 'radiolist',
            value: 'Sends a list with all radios available'
          }
        ],
        timestamp: new Date()
      }
    })
  }

  if (command === 'botinfo') {
    let mode

    if (EXPERIMENTAL === '1') {
      mode = '**EXPERIMENTAL (issues can appear)**'
    } else {
      mode = 'normal'
    }

    msg.channel.send({ embed: {
      title: 'Bot information',
      fields: [
        {
          name: 'Servers',
          value: `${client.guilds.size}`
        },
        {
          name: 'Serving for',
          value: `${client.users.size} users in total`
        },
        {
          name: 'Mode',
          value: mode
        }
      ],
      description: 'Information about the bot',
      color: '3447003'
    }})
  }

  if (command === 'invite') {
    msg.delete()
     .then(msg => console.log(`Successfully deleted the message ${msg.content} from ${msg.author} on ${msg.guild.name}.`))
     .catch(e => {
       console.error(e)
       if (e.name === 'DiscordAPIError') {
         // Check if the error message is that the message is not unknown.
         // If it is, it will not send anything because this would confuse some people. This error (Unknown message)
         // appears only, when another bot deleted the message already before this bot here (this could happen if
         // both bots are using the same command and prefix).
         if (e.message !== 'Unknown Message')
           // Sending the message to the channel with the error message
           { msg.channel.send(`❌ **Cannot delete the message.** (Error: ${e.message})`) }
       } else {
         // Sending a full error message if it´s not a DiscordAPIError
         msg.channel.send(`❌ **Cannot delete the message.** (Error: ${e})`)
       }
     })
    console.log(msg.content)
    msg.author.send('Add the bot with the following link to your server and dont forget to join the main server!: Bot Invite: https://discordapp.com/api/oauth2/authorize?client_id=536720209604771842&permissions=0&scope=bot  Main Server: https://discord.gg/qTHjm9   ')
  }

  if (command === 'list' || command === 'radiolist') {
    msg.channel.send({
      embed: {
        color: 3447003,
        title: 'DFC Radio -> Radio list ',
        fields: [
          {
            name: PREFIX + 'radio',
            value: 'Radio: **Capital FM**'
          },
          {
            name: PREFIX + 'radio 1',
            value: 'Radio: **Kiss 100**'
          },
          {
            name: PREFIX + 'radio 2',
            value: 'Radio: **Heart FM**'
          },
          {
            name: PREFIX + 'radio 3',
            value: 'Radio: **Drum N Bass FM**'
          },
          {
            name: PREFIX + 'radio 4',
            value: 'Radio: **SynthWave FM**'
          }
        ],
        timestamp: new Date()
      }
    })
  }

  if (command === 'leave' || command === 'stop') {
    const voiceChannel = msg.member.voiceChannel
    if (voiceChannel && voiceChannel.id === msg.guild.voiceConnection.channel.id) {
      console.log('Leaving a channel and stopped playing iLoveRadio')
      msg.channel.send('I´m leaving the channel now!')
      voiceChannel.leave()
    } else {
      msg.reply('no')
    }
  }
})

client.login(TOKEN).catch(e => console.log(e))
{
  "name": "dfc-radiobot",
  "version": "1.3.1",
  "description": "A Radio Bot to listen to Internet Radio",
  "main": "bot.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node bot.js",
    "dev": "nodemon bot.js"
  },{
  "name": "DFC-RadioBot",
  "version": "1.3.1",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "async-limiter": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-limiter/-/async-limiter-1.0.0.tgz",
      "integrity": "sha512-jp/uFnooOiO+L211eZOoSyzpOITMXx1rBITauYykG3BRYPu8h0UcxsPNB04RR5vo4Tyz3+ay17tR6JVf9qzYWg=="
    },
    "discord.js": {
      "version": "11.4.2",
      "resolved": "https://registry.npmjs.org/discord.js/-/discord.js-11.4.2.tgz",
      "integrity": "sha512-MDwpu0lMFTjqomijDl1Ed9miMQe6kB4ifKdP28QZllmLv/HVOJXhatRgjS8urp/wBlOfx+qAYSXcdI5cKGYsfg==",
      "requires": {
        "long": "^4.0.0",
        "prism-media": "^0.0.3",
        "snekfetch": "^3.6.4",
        "tweetnacl": "^1.0.0",
        "ws": "^4.0.0"
      }
    },
    "long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="
    },
    "opusscript": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/opusscript/-/opusscript-0.0.6.tgz",
      "integrity": "sha512-F7nx1SWZCD5Rq2W+5Fx39HlkRkz/5Zqt0LglEB9uHexk8HjedDEiM+u/Y2rBfDFcS/0uQIWu2lJhw+Gjsta+cA=="
    },
    "prism-media": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/prism-media/-/prism-media-0.0.3.tgz",
      "integrity": "sha512-c9KkNifSMU/iXT8FFTaBwBMr+rdVcN+H/uNv1o+CuFeTThNZNTOrQ+RgXA1yL/DeLk098duAeRPP3QNPNbhxYQ=="
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "snekfetch": {
      "version": "3.6.4",
      "resolved": "https://registry.npmjs.org/snekfetch/-/snekfetch-3.6.4.tgz",
      "integrity": "sha512-NjxjITIj04Ffqid5lqr7XdgwM7X61c/Dns073Ly170bPQHLm6jkmelye/eglS++1nfTWktpP6Y2bFXjdPlQqdw=="
    },
    "tweetnacl": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.1.tgz",
      "integrity": "sha512-kcoMoKTPYnoeS50tzoqjPY3Uv9axeuuFAZY9M/9zFnhoVvRfxz9K29IMPD7jGmt2c8SW7i3gT9WqDl2+nV7p4A=="
    },
    "ws": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-4.1.0.tgz",
      "integrity": "sha512-ZGh/8kF9rrRNffkLFV4AzhvooEclrOH0xaugmqGsIfFgOE/pIz4fMc4Ef+5HSQqTEug2S9JZIWDR47duDSLfaA==",
      "requires": {
        "async-limiter": "~1.0.0",
        "safe-buffer": "~5.1.0"
      }
    }
  }
}
  "repository": {
    "type": "git",
    "url": "git+https://github.com/julianYaman/iloveradio-discord-bot.git"
  },
  "keywords": [
    "discord",
    "bot",
    "RadioBot"
  ],
  "author": "Moon",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/julianYaman/iloveradio-discord-bot/issues"
  },
  "homepage": "https://github.com/julianYaman/iloveradio-discord-bot#readme",
  "dependencies": {
    "debug": "^4.1.1",
    "discord.js": "^11.4.2",
    "ffmpeg-binaries": "^4.0.0",
    "opusscript": "0.0.6",
    "tough-cookie": "^3.0.0"
  },
  "dev-dependencies": {
    "nodemon": "^1.18.9"
  }
}

process.on('unhandledRejection', (PromiseRejection) => console.error(`Promise Error -> ${PromiseRejection}`))
